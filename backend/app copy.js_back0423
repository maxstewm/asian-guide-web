// backend/app.js

const express = require('express');
const dotenv = require('dotenv');
const cors = require('cors');
const pool = require('./db');
const authenticateToken = require('./middleware/auth'); // 再次确认目录名!
const { generateUniqueSlug } = require('./utils/slug');
const { JSDOM } = require('jsdom');
const DOMPurify = require('dompurify');

// --- 引入其他路由文件 ---
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/users');
const uploadRoutes = require('./routes/upload');
// const articleRoutes = require('./routes/articles'); // <-- 不再需要引入整个 router

dotenv.config();
const app = express();

// --- 配置 CORS ---
// 允许来自你前端开发服务器源的请求
const corsOptions = {
  // origin: 'http://35.198.219.2:3001', // 只允许你的前端来源
  // 或者使用函数动态判断，或者允许一个列表
  origin: function (origin, callback) {
    // 在开发中，允许来自前端开发服务器的请求
    // 生产环境中，你需要添加你的部署后的前端域名
    const allowedOrigins = [
        'http://35.198.219.2:3001', // 你的前端开发服务器
        'http://localhost:3001',    // 可能的本地开发前端
        // 'https://your-deployed-frontend.com' // 生产环境的前端域名
    ];
    // 允许没有 origin 的请求 (例如 Postman, curl)
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },


  origin: 'http://35.198.219.2:3001', // 明确指定允许的前端源
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE', // 允许的方法
  allowedHeaders: ['Content-Type', 'Authorization'], // 允许的请求头
  credentials: true, // 如果需要传递 cookie (JWT 通常不需要)
  optionsSuccessStatus: 204 // 让 OPTIONS 预检请求返回 204 No Content
};
app.use(cors(corsOptions)); // <-- 在路由之前使用 cors 中间件并传入配置

// 中间件
//app.use(cors()); // 允许跨域请求 (对于本地开发和分离的前后端很有用)
app.use(express.json());

// --- 挂载路由 ---
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api', articleRoutes); // 注意: 像 /api/articles, /api/countries 会挂载在这里
// 注意 uploadRoutes 现在可能包含带参数的路径，挂载时要小心
// 保持 /api/upload 前缀，具体参数在 upload.js 内部处理
app.use('/api/upload', uploadRoutes);
app.use('/api/articles', articleRoutes); // 包含了 /draft 和 /:id /:slug
// ...

// 简单的根路径或 API 文档入口 (可选)
app.get('/', (req, res) => {
  res.send('Travel Asia API is running!');
});

// --- 404 错误处理 (可选) ---
app.use((req, res, next) => {
  res.status(404).send("Sorry, can't find that!");
});

// --- 全局错误处理中间件 (必须放在路由之后) ---
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});


// 导出 app 实例，供 index.js 使用
// 导出 app 实例，而不是启动服务器
module.exports = app;