// backend/routes/articles.js
const express = require('express');
const router = express.Router();
const pool = require('../db'); // 数据库连接池
const authenticateToken = require('../middleware/auth'); // JWT 认证中间件
const { generateUniqueSlug } = require('../utils/slug'); // Slug 生成工具函数
const { JSDOM } = require('jsdom'); // 用于 DOMPurify 在 Node.js 环境运行
const DOMPurify = require('dompurify'); // HTML 清理库

// 初始化 DOMPurify
const window = new JSDOM('').window;
const purify = DOMPurify(window);


// --- 创建文章草稿 ---
// POST /api/articles/draft
router.post('/draft', authenticateToken, async (req, res) => {
  const userId = req.user.id;
  try {
    // 创建一个非常基础的草稿记录
    const insertQuery = `
      INSERT INTO articles (user_id, status)
      VALUES ($1, 'draft')
      RETURNING id;
    `;
    const result = await pool.query(insertQuery, [userId]);
    const articleId = result.rows[0].id;
    console.log(`Draft article created with ID: ${articleId} for user ${userId}`);
    res.status(201).json({ articleId: articleId }); // 返回草稿 ID
  } catch (err) {
    console.error("Failed to create draft article:", err);
    res.status(500).json({ message: 'Server error, failed to create draft.' });
  }
});

// --- 更新文章 (包括保存草稿和发布) ---
// PUT /api/articles/:id
//router.put('/:id(\\d+)', authenticateToken, async (req, res) => { // :id 匹配数字
router.put('/:id', authenticateToken, async (req, res) => {
  const idParam = req.params.id;
  const articleId = parseInt(idParam, 10);
  // --- 手动验证 ID ---
  if (isNaN(articleId) || String(articleId) !== idParam) {
       return res.status(400).json({ message: 'Invalid article ID format. Must be an integer.' });
  }
  const userId = req.user.id;
  
  // 获取要更新的数据，以及目标状态 (draft 或 published)
  const { title, content, country_slug, status } = req.body; // status 由前端决定是 'draft' 还是 'published'

  // 验证 status 值
  if (status && status !== 'draft' && status !== 'published') {
      return res.status(400).json({ message: 'Invalid status value.' });
  }

  // 清理 content (如果是纯文本 textarea，可以简化或移除)
  const cleanContent = content ? purify.sanitize(content, { USE_PROFILES: { html: true } }) : null;

  const client = await pool.connect(); // 使用事务
  try {
    await client.query('BEGIN');

    // 1. 检查文章是否存在以及用户是否有权编辑
    const checkQuery = 'SELECT user_id FROM articles WHERE id = $1';
    const checkResult = await client.query(checkQuery, [articleId]);
    if (checkResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ message: 'Article not found.' });
    }
    if (checkResult.rows[0].user_id !== userId) {
      await client.query('ROLLBACK');
      return res.status(403).json({ message: 'You do not have permission to edit this article.' });
    }

    // 2. 准备更新字段
    const updates = [];
    const values = [];
    let paramIndex = 1;

    if (title !== undefined) { updates.push(`title = $${paramIndex++}`); values.push(title); }
    if (cleanContent !== undefined) { updates.push(`content = $${paramIndex++}`); values.push(cleanContent); }
    if (status) { updates.push(`status = $${paramIndex++}`); values.push(status); }

    // 更新 country_id (如果 country_slug 存在)
    let countryId = null;
    if (country_slug) {
        const countryResult = await client.query('SELECT id FROM countries WHERE slug = $1', [country_slug]);
        if (countryResult.rows.length > 0) {
            countryId = countryResult.rows[0].id;
            updates.push(`country_id = $${paramIndex++}`);
            values.push(countryId);
        } else {
             console.warn(`Country slug "${country_slug}" not found during update.`);
             // 可以选择报错或忽略
        }
    }

    // 如果是发布 (status 变为 published) 并且还没有 slug，则生成 slug
    let finalSlug = null;
    if (status === 'published') {
        const slugResult = await client.query('SELECT slug FROM articles WHERE id = $1', [articleId]);
        const currentSlug = slugResult.rows[0].slug;
        if (!currentSlug && title) { // 只有在 slug 为空且标题存在时生成
            finalSlug = await generateUniqueSlug(title, client); // 传入 client 以在事务中检查唯一性
            updates.push(`slug = $${paramIndex++}`);
            values.push(finalSlug);
            console.log(`Generated slug "${finalSlug}" for article ${articleId}`);
        } else {
            finalSlug = currentSlug; // 保留现有 slug
        }
    }

    // 如果没有任何要更新的字段 (除了可能的状态)
    if (updates.length === 0) {
        await client.query('ROLLBACK');
        return res.status(400).json({ message: 'No valid fields provided for update.' });
    }


    // 3. 执行更新
    const updateQuery = `UPDATE articles SET ${updates.join(', ')}, updated_at = CURRENT_TIMESTAMP WHERE id = $${paramIndex} RETURNING slug;`;
    values.push(articleId);
    const updateResult = await client.query(updateQuery, values);
    const updatedSlug = finalSlug || updateResult.rows[0]?.slug; // 获取最终的 slug

    await client.query('COMMIT');
    console.log(`Article ${articleId} updated successfully. Status: ${status || 'unchanged'}`);
    res.json({ message: `Article ${status === 'published' ? 'published' : 'saved as draft'} successfully!`, slug: updatedSlug }); // 返回 slug 方便跳转

  } catch (err) {
    await client.query('ROLLBACK');
    console.error(`Failed to update article ${articleId}:`, err);
    if (err.code === '23505' && err.constraint === 'articles_slug_key') {
         return res.status(400).json({ message: 'Failed to generate a unique slug. Title might be too similar to an existing one.' });
    }
    res.status(500).json({ message: 'Server error, failed to update article.' });
  } finally {
    client.release();
  }
});



// --- 获取国家列表 (GET /api/countries) ---
router.get('/countries', async (req, res) => {
  try {
    const result = await pool.query('SELECT id, name, slug FROM countries ORDER BY name ASC');
    res.json(result.rows);
  } catch (err) {
    console.error("Failed to fetch countries:", err);
    res.status(500).json({ message: 'Server error while fetching countries.' });
  }
});

// --- 获取文章列表 (只获取已发布的，除非特殊指定) ---
router.get('/', async (req, res) => { // <--- 修改这个路由处理函数
  // 1. 解析查询参数并设置默认值
  console.log(`>>> GET /api/articles (list) route handler entered. Query:`, req.query); // <--- 添加这条日志

  const {
      country,
      page = 1,
      limit = 10,
      featured,
      sortBy = 'created_at',
      order = 'desc',
      // 注意: 如果你想让 /api/articles 也能获取草稿 (例如用于管理员后台)，
      // 可以添加一个 status 查询参数: const { status } = req.query;
      // 但通常公共列表只显示 published
  } = req.query;

  // 2. 参数验证和转换 (不变)
  const pageNum = parseInt(page, 10);
  const limitNum = parseInt(limit, 10);
  const isFeatured = featured === 'true';

  if (isNaN(pageNum) || pageNum < 1) { /* ... */ }
  if (isNaN(limitNum) || limitNum < 1 || limitNum > 50) { /* ... */ }

  // 3. 构建数据库查询
  const offset = (pageNum - 1) * limitNum;
  let params = []; // 主查询参数
  let countParams = []; // 计数查询参数
  let whereClauses = [];
  let joins = `
    JOIN users u ON a.user_id = u.id
    JOIN countries c ON a.country_id = c.id
  `;
  let paramIndex = 1;

  // --- 添加 WHERE 子句 ---

  // *** 新增：默认只查询已发布的文章 ***
  whereClauses.push(`a.status = 'published'`);
  // 注意：这个条件没有参数，所以不需要添加到 params 或 countParams

  // (可选) 如果你需要通过查询参数来获取草稿或所有状态的文章:
  // if (status && ['published', 'draft'].includes(status)) {
  //     whereClauses.push(`a.status = $${paramIndex++}`);
  //     params.push(status);
  //     countParams.push(status);
  // } else {
  //     // 默认只显示 published
  //     whereClauses.push(`a.status = 'published'`);
  // }


  if (country) {
    whereClauses.push(`c.slug = $${paramIndex++}`);
    params.push(country);
    countParams.push(country);
  }
  if (isFeatured) {
    whereClauses.push(`a.is_featured = true`);
    // 无需参数
  }
  // 注意：按作者过滤的逻辑 (authorId) 已经移到了 /api/users/me/articles，
  // 所以这里通常不需要再处理 authorId 参数了。
  // if (authorId) { /* ... */ }


  // --- 构建 WHERE 字符串 ---
  // whereClauses 现在至少包含 a.status = 'published'
  const whereString = `WHERE ${whereClauses.join(' AND ')}`; // 因为现在总是有 status 条件，所以不需要判断 length > 0

  // 处理排序 (不变)
  const allowedSortBy = ['created_at', 'updated_at', 'title'];
  const allowedOrder = ['asc', 'desc'];
  const sortColumnMap = { /* ... */ };
  const sortColumn = sortColumnMap[sortBy] || 'a.created_at';
  const sortOrder = allowedOrder.includes(order.toLowerCase()) ? order.toUpperCase() : 'DESC';
  const orderByString = `ORDER BY ${sortColumn} ${sortOrder}`;

  // 构建主查询 (不变)
  const articlesQuery = `
    SELECT
      a.id, a.title, a.slug, a.cover_image_url, a.created_at, a.updated_at, a.is_featured,
      -- 如果需要 main_image_url, 也要加入 SELECT 列表
      a.main_image_url,
      u.id AS author_id, u.username AS author_username,
      c.id AS country_id, c.name AS country_name, c.slug AS country_slug
    FROM articles a
    ${joins}
    ${whereString}
    ${orderByString}
    LIMIT $${paramIndex++} OFFSET $${paramIndex++};
  `;
  const queryParams = [...params, limitNum, offset];

  // 构建计数查询 (不变)
  const countQuery = `SELECT COUNT(*) FROM articles a ${joins} ${whereString}`;
  // 计数查询参数 countParams 已在上面准备好

   // --- 打印 SQL 和参数 ---
   console.log('--- Articles Query ---');
   console.log('SQL:', articlesQuery);
   console.log('Params:', queryParams);
   console.log('--- Count Query ---');
   console.log('SQL:', countQuery);
   console.log('Params:', countParams);
   // --- 结束打印 ---


  // 4. 执行查询 (不变)
  try {
    const [articlesResult, countResult] = await Promise.all([
      pool.query(articlesQuery, queryParams),
      pool.query(countQuery, countParams)
    ]);

    const totalArticles = parseInt(countResult.rows[0].count, 10);
    const totalPages = Math.ceil(totalArticles / limitNum);


    if (articlesResult.rows.length === 0) {
      console.log('No articles found matching the criteria.');
      // 这里决定是返回 200 OK + 空数组，还是 404
      // 返回 200 OK 和空数组通常更好
      // return res.status(404).json({ message: 'Article not found or not published yet.' }); // 这是导致 404 的原因吗？
  }
    // 5. 返回结果 (不变)
    res.json({
      articles: articlesResult.rows,
      pagination: {
        currentPage: pageNum,
        totalPages: totalPages,
        totalArticles: totalArticles,
        limit: limitNum
      }
    });
  } catch (err) {
    console.error("Failed to fetch articles:", err);
    res.status(500).json({ message: 'Server error while fetching articles.' });
  }
});


router.get('/:slug', async (req, res) => { // Slug 可以包含字母、数字、连字符
//router.get('/detail-test/:slug', async (req, res) => {
  console.log(`>>> GET /api/articles/:slug (detail) route handler entered. Slug:`, req.params.slug); // <--- 添加这条日志
const { slug } = req.params;
  try {
      // 1. 查询文章基本信息 (只获取已发布的)
      const articleQuery = `
      SELECT
          a.id, a.title, a.content, a.slug, a.created_at, a.updated_at, a.status,
          u.id AS author_id, u.username AS author_username, -- 作者信息
          c.id AS country_id, c.name AS country_name, c.slug AS country_slug -- 国家信息
      FROM articles a
      JOIN users u ON a.user_id = u.id
      LEFT JOIN countries c ON a.country_id = c.id -- LEFT JOIN 以防国家不存在
      WHERE a.slug = $1 AND a.status = 'published'; -- 只获取已发布的
      `;
      const articleResult = await pool.query(articleQuery, [slug]);

      if (articleResult.rows.length === 0) {
        console.log('No articles found matching the criteria.');
        //return res.status(200).json({ message: 'Article not found or not published yet.' });
        return res.status(404).json({ message: 'Article not found or not published yet.' });
      }
      const article = articleResult.rows[0];

      // 2. 查询关联的图片信息 (按顺序)
      const imagesQuery = `
      SELECT id, image_url, upload_order
      FROM article_images
      WHERE article_id = $1
      ORDER BY upload_order ASC, uploaded_at ASC; -- 按指定顺序或上传时间排序
      `;
      const imagesResult = await pool.query(imagesQuery, [article.id]);

      // 3. 组合结果并返回
      const responseData = {
          ...article,
          images: imagesResult.rows // 将图片数组添加到文章对象中
      };

      res.json(responseData);
  } catch (err) {
      console.error(`Failed to fetch article with slug ${slug}:`, err);
      res.status(500).json({ message: 'Server error.' });
  }
});



// --- 删除文章 (DELETE /api/articles/:id) ---
router.delete('/:id', authenticateToken, async (req, res) => {
//router.delete('/:id(\\d+)', authenticateToken, async (req, res) => {
  const idParam = req.params.id;
  const articleId = parseInt(idParam, 10);
  // --- 手动验证 ID ---
  if (isNaN(articleId) || String(articleId) !== idParam) {
       return res.status(400).json({ message: 'Invalid article ID format. Must be an integer.' });
  }
  // 1. 获取参数和用户 ID
  const { id } = req.params;
  const userId = req.user.id;

  // 2. 验证输入
  if (isNaN(articleId)) {
    return res.status(400).json({ message: 'Invalid article ID.' });
  }

  // 3. 数据库操作 (使用事务，虽然简单删除可能不需要，但保持一致性)
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // 3.1 检查文章是否存在及所有权
    const checkResult = await client.query('SELECT user_id FROM articles WHERE id = $1', [articleId]);
    if (checkResult.rows.length === 0) {
      await client.query('ROLLBACK'); client.release();
      return res.status(404).json({ message: 'Article not found.' });
    }
    if (checkResult.rows[0].user_id !== userId) {
       await client.query('ROLLBACK'); client.release();
       return res.status(403).json({ message: 'You do not have permission to delete this article.' });
    }

    // 3.2 执行删除
    const deleteResult = await client.query('DELETE FROM articles WHERE id = $1', [articleId]);

    // 3.3 检查是否真的删除了 (可选)
    if (deleteResult.rowCount === 0) {
        // 理论上不应该发生，因为上面检查过了
        console.warn(`Article with ID ${articleId} was checked but deletion affected 0 rows.`);
    }

    // 3.4 提交事务
    await client.query('COMMIT');
    client.release();

    // 4. 返回成功响应
    res.status(200).json({ message: 'Article deleted successfully.' }); // 200 OK 或 204 No Content

  } catch (err) {
    await client.query('ROLLBACK'); // 出错时回滚
    client.release();
    console.error("Failed to delete article:", err);
    res.status(500).json({ message: 'Server error, deletion failed.' });
  }
});

module.exports = router;

// 确保你有一个 backend/utils/slug.js 文件，内容类似:
/*
// backend/utils/slug.js
const slugify = require('slugify');
const pool = require('../db'); // 确保能访问 db 连接池

async function generateUniqueSlug(title, attempt = 0) {
  let slug = slugify(title, { lower: true, strict: true, remove: /[*+~.()'"!:@]/g }); // 添加 remove 移除非 URL 友好字符
  if (attempt > 0) {
    slug = `${slug}-${attempt}`;
  }
  // 防止 slug 过长 (数据库可能有长度限制)
  slug = slug.substring(0, 250); // 假设 slug 列长度为 255

  try {
    const result = await pool.query('SELECT 1 FROM articles WHERE slug = $1 LIMIT 1', [slug]); // 使用 SELECT 1 更高效
    if (result.rows.length === 0) {
      return slug;
    } else {
      // 如果尝试次数过多，可能需要抛出错误或采取其他策略
      if (attempt > 10) {
         console.error(`Failed to generate unique slug for title "${title}" after ${attempt} attempts.`);
         // 可以返回一个带时间戳的 slug 作为后备
         return `${slugify(title.substring(0, 50), { lower: true, strict: true, remove: /[*+~.()'"!:@]/g })}-${Date.now()}`;
      }
      return await generateUniqueSlug(title, attempt + 1);
    }
  } catch (err) {
    console.error("Error checking slug uniqueness:", err);
    throw new Error("Failed to generate unique slug due to database error.");
  }
}

module.exports = { generateUniqueSlug };
*/
